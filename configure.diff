--- libs/libtorc-av/configure	2012-12-09 20:37:03.000000000 +0000
+++ configure	2013-04-04 15:31:59.000000000 +0100
@@ -1,6 +1,6 @@
 #!/bin/sh
 #
-# Libav configure script
+# Torc configure script, which extends the Libav configure script
 #
 # Copyright (c) 2000-2002 Fabrice Bellard
 # Copyright (c) 2005-2008 Diego Biurrun
@@ -285,6 +285,19 @@
   --random-seed=VALUE      seed value for --enable/disable-random
 
 NOTE: Object files are built at the place where configure is launched.
+
+Torc:
+  --cxx=CXX                use C++ compiler CXX [$cxx_default]
+  --extra-cxxflags=ECXFLAGS add ECXXFLAGS to list of flags for C++ compile
+  --qmake=QMAKE            use specified qmake [$qmake_default]
+
+Torc external library support:
+  --disable-libdns_sd      disable Bonjour via libdns_sd [autodetect]
+  --disable-libudev        disable udev via libudev [autodetect]
+  --disable-qtdbus         disable DBus via QtDbus [autodetect]
+  --disable-x11base        disable default X11 support [autodetect]
+  --disable-libcrypto      disable use of the OpenSSL cryptographic library
+
 EOF
   exit 0
 }
@@ -667,6 +680,29 @@
     check_cmd $cc $CPPFLAGS $CFLAGS "$@" $CC_C $(cc_o $TMPO) $TMPC
 }
 
+check_cxx(){
+    log check_cxx "$@"
+    cat > $TMPCPP
+    log_file $TMPCPP
+    check_cmd $cxx $CPPFLAGS $CXXFLAGS "$@" -c -o $TMPO $TMPCPP
+}
+
+add_cxxflags(){
+    append ECXXFLAGS "$@"
+}
+
+add_cxxppflags(){
+    append CXXPPFLAGS "$@"
+}
+
+check_cxxflags(){
+    log check_cxxflags "$@"
+    check_cxx "$@" <<EOF && add_cxxflags "$@" || echolog "WARNING! An unknown C++ compiler flag in: \"$@\". Option(s) will be ignored."
+class X {};
+int x;
+EOF
+}
+
 check_cpp(){
     log check_cpp "$@"
     cat > $TMPC
@@ -796,17 +832,20 @@
 check_func_headers(){
     log check_func_headers "$@"
     headers=$1
-    funcs=$2
+    func=$2
     shift 2
-    {
-        for hdr in $headers; do
-            echo "#include <$hdr>"
-        done
-        for func in $funcs; do
-            echo "long check_$func(void) { return (long) $func; }"
-        done
-        echo "int main(void) { return 0; }"
-    } | check_ld "$@" && enable $funcs && enable_safe $headers
+    disable $func
+    incs=""
+    for hdr in $headers; do
+        incs="$incs
+#include <$hdr>"
+    done
+    check_ld "$@" <<EOF && enable $func && enable_safe $headers
+$incs
+int main(int argc, char **argv){
+    return (long) $func;
+}
+EOF
 }
 
 check_cpp_condition(){
@@ -1052,6 +1091,11 @@
     xmm_clobber_test
     x11grab
     zlib
+    libcrypto
+    libdns_sd
+    libudev
+    qtdbus
+    x11base
 "
 
 THREADS_LIST='
@@ -1170,6 +1214,8 @@
     attribute_packed
     closesocket
     cmov
+    cpu_clips_negative
+    cpu_clips_positive
     cpunop
     CryptGenRandom
     dcbzl
@@ -1331,6 +1377,7 @@
     cc
     cpu
     cross_prefix
+    cxx
     dep_cc
     extra_version
     host_cc
@@ -1345,6 +1392,7 @@
     nm
     optflags
     pkg_config
+    qmake
     random_seed
     samples
     sysinclude
@@ -1743,15 +1791,17 @@
 # installation paths
 prefix_default="/usr/local"
 bindir_default='${prefix}/bin'
-datadir_default='${prefix}/share/avconv'
-incdir_default='${prefix}/include'
+datadir_default='${prefix}/share/torc'
+incdir_default='${prefix}/include/torc'
 libdir_default='${prefix}/lib'
 mandir_default='${prefix}/share/man'
 shlibdir_default="$libdir_default"
+libdir_name='lib'
 
 # toolchain
 ar_default="ar"
 cc_default="gcc"
+cxx_default="g++"
 host_cc_default="gcc"
 cp_f="cp -f"
 ln_s="ln -sf"
@@ -1791,14 +1841,35 @@
 enable static
 enable swscale_alpha
 
+# Torc requirements
+echo "Torc:"
+echo
+echo "Forcing shared libraries (and disabling static)"
+echo
+enable gpl
+enable libcdio
+disable outdevs
+disable static
+disable doc
+enable shared
+enable x11base
+enable vaapi
+
+# Torc configurable options
+enable libcrypto
+enable libdns_sd
+enable libudev
+enable qtdbus
+qmake_default="qmake"
+
 # build settings
 SHFLAGS='-shared -Wl,-soname,$$(@F)'
 AVSERVERLDFLAGS=-Wl,-E
-LIBPREF="lib"
+LIBPREF="libtorc-"
 LIBSUF=".a"
 FULLNAME='$(NAME)$(BUILDSUF)'
 LIBNAME='$(LIBPREF)$(FULLNAME)$(LIBSUF)'
-SLIBPREF="lib"
+SLIBPREF="libtorc-"
 SLIBSUF=".so"
 SLIBNAME='$(SLIBPREF)$(FULLNAME)$(SLIBSUF)'
 SLIBNAME_WITH_VERSION='$(SLIBNAME).$(LIBVERSION)'
@@ -1816,6 +1887,7 @@
 CC_C='-c'
 CC_E='-E -o $@'
 CC_O='-o $@'
+CXX_O='-o $@'
 LD_O='-o $@'
 LD_LIB='-l%'
 LD_PATH='-L'
@@ -1860,17 +1932,17 @@
     sed -n "s/^[^#]*$pattern.*([^,]*, *\([^,]*\)\(,.*\)*).*/\1_$thing/p" "$file"
 }
 
-ENCODER_LIST=$(find_things  encoder  ENC      libavcodec/allcodecs.c)
-DECODER_LIST=$(find_things  decoder  DEC      libavcodec/allcodecs.c)
-HWACCEL_LIST=$(find_things  hwaccel  HWACCEL  libavcodec/allcodecs.c)
-PARSER_LIST=$(find_things   parser   PARSER   libavcodec/allcodecs.c)
-BSF_LIST=$(find_things      bsf      BSF      libavcodec/allcodecs.c)
-MUXER_LIST=$(find_things    muxer    _MUX     libavformat/allformats.c)
-DEMUXER_LIST=$(find_things  demuxer  DEMUX    libavformat/allformats.c)
-OUTDEV_LIST=$(find_things   outdev   OUTDEV   libavdevice/alldevices.c)
-INDEV_LIST=$(find_things    indev    _IN      libavdevice/alldevices.c)
-PROTOCOL_LIST=$(find_things protocol PROTOCOL libavformat/allformats.c)
-FILTER_LIST=$(find_things   filter   FILTER   libavfilter/allfilters.c)
+ENCODER_LIST=$(find_things  encoder  ENC      libs/libtorc-av/libavcodec/allcodecs.c)
+DECODER_LIST=$(find_things  decoder  DEC      libs/libtorc-av/libavcodec/allcodecs.c)
+HWACCEL_LIST=$(find_things  hwaccel  HWACCEL  libs/libtorc-av/libavcodec/allcodecs.c)
+PARSER_LIST=$(find_things   parser   PARSER   libs/libtorc-av/libavcodec/allcodecs.c)
+BSF_LIST=$(find_things      bsf      BSF      libs/libtorc-av/libavcodec/allcodecs.c)
+MUXER_LIST=$(find_things    muxer    _MUX     libs/libtorc-av/libavformat/allformats.c)
+DEMUXER_LIST=$(find_things  demuxer  DEMUX    libs/libtorc-av/libavformat/allformats.c)
+OUTDEV_LIST=$(find_things   outdev   OUTDEV   libs/libtorc-av/libavdevice/alldevices.c)
+INDEV_LIST=$(find_things    indev    _IN      libs/libtorc-av/libavdevice/alldevices.c)
+PROTOCOL_LIST=$(find_things protocol PROTOCOL libs/libtorc-av/libavformat/allformats.c)
+FILTER_LIST=$(find_things   filter   FILTER   libs/libtorc-av/libavfilter/allfilters.c)
 
 ALL_COMPONENTS="
     $BSF_LIST
@@ -1933,6 +2005,8 @@
 for opt do
     optval="${opt#*=}"
     case "$opt" in
+    --extra-cxxflags=*) add_cxxflags $optval
+    ;;
     --extra-ldflags=*) add_ldflags $optval
     ;;
     --extra-libs=*) add_extralibs $optval
@@ -1993,6 +2067,15 @@
     esac
 done
 
+#setting default runtime prefix and libdir
+if test -n "${prefix}"; then
+    libdir_default="${prefix}/${libdir_name}"
+    shlibdir_default="${prefix}/${libdir_name}"
+else
+    libdir_default="${prefix_default}/${libdir_name}"
+    shlibdir_default="${prefix_default}/${libdir_name}"
+fi
+
 disabled logging && logfile=/dev/null
 
 echo "# $0 $LIBAV_CONFIGURATION" > $logfile
@@ -2007,6 +2090,7 @@
 
 ar_default="${cross_prefix}${ar_default}"
 cc_default="${cross_prefix}${cc_default}"
+cxx_default="${cross_prefix}${cxx_default}"
 nm_default="${cross_prefix}${nm_default}"
 pkg_config_default="${cross_prefix}${pkg_config_default}"
 ranlib="${cross_prefix}${ranlib}"
@@ -2036,7 +2120,7 @@
     ;;
 esac
 
-set_default arch cc pkg_config sysinclude target_os
+set_default arch cc pkg_config sysinclude target_os cxx qmake
 enabled cross_compile || host_cc_default=$cc
 set_default host_cc
 
@@ -2079,6 +2163,7 @@
 
 tmpfile TMPASM .asm
 tmpfile TMPC   .c
+tmpfile TMPCPP .cpp
 tmpfile TMPE   $EXESUF
 tmpfile TMPH   .h
 tmpfile TMPO   .o
@@ -2419,11 +2504,13 @@
     case "$cc_type" in
         gcc|llvm_gcc|clang)
             add_cppflags --sysroot="$sysroot"
+            add_cxxppflags --sysroot="$sysroot"
             add_ldflags --sysroot="$sysroot"
         ;;
         tms470)
             add_cppflags -I"$sysinclude"
             add_ldflags  --sysroot="$sysroot"
+            add_cxxppflags -I"$sysinclude"
         ;;
     esac
 fi
@@ -2733,6 +2820,7 @@
         add_extralibs -lpoll -lgnugetopt
         ;;
     darwin)
+        disable x11base
         gas="gas-preprocessor.pl $cc"
         enabled ppc && add_asflags -force_cpusubtype_ALL
         SHFLAGS='-dynamiclib -Wl,-single_module -Wl,-install_name,$(SHLIBDIR)/$(SLIBNAME_WITH_MAJOR),-current_version,$(LIBVERSION),-compatibility_version,$(LIBMAJOR)'
@@ -2760,7 +2848,6 @@
             LIBTARGET=arm-wince
         fi
         shlibdir_default="$bindir_default"
-        SLIBPREF=""
         SLIBSUF=".dll"
         SLIBNAME_WITH_VERSION='$(SLIBPREF)$(FULLNAME)-$(LIBVERSION)$(SLIBSUF)'
         SLIBNAME_WITH_MAJOR='$(SLIBPREF)$(FULLNAME)-$(LIBMAJOR)$(SLIBSUF)'
@@ -2986,6 +3073,8 @@
     add_cppflags -DPIC
     add_cflags   -fPIC
     add_asflags  -fPIC
+    add_cxxflags -fPIC
+    add_cxxppflags -DPIC
 }
 
 enabled pic && enable_pic
@@ -3002,7 +3091,7 @@
 
 _restrict=
 for restrict_keyword in restrict __restrict__ __restrict; do
-    check_cc <<EOF && _restrict=$restrict_keyword && break
+    check_cxx <<EOF && _restrict=$restrict_keyword && break
 void foo(char * $restrict_keyword p);
 EOF
 done
@@ -3247,6 +3336,7 @@
 check_header dlfcn.h
 check_header dxva.h
 check_header dxva2api.h
+check_struct dxva2api.h DXVA_PictureParameters wDecodedPictureIndex
 check_header io.h
 check_header malloc.h
 check_header poll.h
@@ -3296,7 +3386,7 @@
 done
 
 check_lib math.h sin -lm && LIBM="-lm"
-enabled vaapi && require vaapi va/va.h vaInitialize -lva
+enabled vaapi && check_lib vaapi va/va.h vaInitialize -lva
 
 for func in $MATH_FUNCS; do
     check_mathfunc $func
@@ -3339,6 +3429,9 @@
                         check_lib openssl/ssl.h SSL_library_init -lssl32 -leay32 ||
                         check_lib openssl/ssl.h SSL_library_init -lssl -lcrypto -lws2_32 -lgdi32 ||
                         die "ERROR: openssl not found"; }
+enabled dxva2 && enabled dxva2api_h && enabled windows || disable dxva2
+enabled x11base && check_lib X11/Xlib.h XQueryExtension -lX11 || disable x11base
+enabled x11base && check_lib X11/extensions/xf86vmode.h XF86VidModeSetClientVersion -lXxf86vm || disable x11base
 
 if enabled gnutls; then
     { check_lib nettle/bignum.h nettle_mpz_get_str_256 -lnettle -lhogweed -lgmp && enable nettle; } ||
@@ -3394,7 +3487,7 @@
 enabled_any sndio_indev sndio_outdev && check_lib2 sndio.h sio_open -lsndio
 
 enabled libcdio &&
-    check_lib2 "cdio/cdda.h cdio/paranoia.h" cdio_cddap_open -lcdio_paranoia -lcdio_cdda -lcdio
+    check_lib2 "cdio/cdda.h cdio/paranoia.h" cdio_cddap_open -lcdio_paranoia -lcdio_cdda -lcdio || disable libcdio
 
 enabled x11grab                                           &&
 require X11 X11/Xlib.h XOpenDisplay -lX11                 &&
@@ -3411,7 +3504,7 @@
         { echolog "Please upgrade to libvdpau >= 0.2 if you would like vdpau support." && disable vdpau; }
 fi
 
-enabled debug && add_cflags -g"$debuglevel" && add_asflags -g"$debuglevel"
+enabled debug && add_cflags -g"$debuglevel" && add_asflags -g"$debuglevel" && add_cxxflags -g"$debuglevel"
 
 # add some useful compiler flags if supported
 check_cflags -Wdeclaration-after-statement
@@ -3430,6 +3523,13 @@
 check_cflags -Wmissing-prototypes
 check_cflags -Wstrict-prototypes
 enabled extra_warnings && check_cflags -Winline
+check_cxxflags -Wall
+check_cxxflags -Wpointer-arith
+check_cxxflags -Wno-non-virtual-dtor
+#needed for INT64_C in libs/libavformat under g++
+check_cxxflags -D__STDC_CONSTANT_MACROS
+check_cxxflags -D__STDC_LIMIT_MACROS
+check_cxxflags -Woverloaded-virtual
 
 # add some linker flags
 check_ldflags -Wl,--warn-common
@@ -3463,11 +3563,16 @@
 if [ -z "$optflags" ]; then
     if enabled small; then
         optflags=$cflags_size
+        add_cxxflags $size_cflags
     elif enabled optimizations; then
         optflags=$cflags_speed
+        add_cxxflags $speed_cflags
     else
         optflags=$cflags_noopt
+        add_cxxflags $noopt_cflags
     fi
+else
+    add_cxxflags $optflags
 fi
 
 check_optflags(){
@@ -3563,6 +3668,8 @@
 ! enabled_any memalign posix_memalign aligned_malloc &&
     enabled_any $need_memalign && enable memalign_hack
 
+#disable $INDEV_LIST
+
 echo "install prefix            $prefix"
 echo "source path               $source_path"
 echo "C compiler                $cc"
@@ -3672,6 +3779,112 @@
 
 echo "License: $license"
 
+# Torc
+
+# Qt
+if ! expr $($qmake -query QT_VERSION) : "5\.[0-9]\.[0-9]" >/dev/null; then
+  if ! expr $($qmake -query QT_VERSION) : "4\.[7-9]\.[0-9]" >/dev/null; then
+      die "qmake for Qt4.7 or newer not found.\nPlease specify the correct qmake with --qmake="
+  fi
+fi
+
+if test $target_os = mingw32 ; then
+    qt_inc="-I`cd $(${qmake} -query QT_INSTALL_HEADERS); pwd`"
+    qt_libs="-L`cd $(${qmake} -query QT_INSTALL_LIBS) ; pwd`"
+else
+    qt_inc="-I${sysroot}/$(${qmake} -query QT_INSTALL_HEADERS)"
+    qt_libs="-L${sysroot}/$(${qmake} -query QT_INSTALL_LIBS)"
+fi
+
+# QtDbus support
+if enabled qtdbus && ! $(pkg-config --exists QtDBus) ; then
+    check_cxx ${qt_inc} <<EOF || { disable qtdbus; }
+#include <QtDBus/QtDBus>
+#include <QtDBus/QDBusInterface>
+int main(void)
+{
+    QDBusInterface test("org.kde.test", "/test", "org.kde.blah");
+    return 0;
+}
+EOF
+fi
+
+# udev support for linux disk detection
+enabled libudev && check_lib2 libudev.h udev_new -ludev || disable libudev
+
+# libcrypto for RAOP
+enabled libcrypto && check_lib openssl/rsa.h RSA_new -lcrypto || disable libcrypto
+
+# Bonjour support for service discovery and registration
+if test $target_os != darwin ; then
+    enabled libdns_sd && check_lib dns_sd.h DNSServiceRegister -ldns_sd || disable libdns_sd
+fi
+
+# clipping test for libtorc-audio/samplerate
+check_exec -lm << EOF && enable cpu_clips_positive
+    #define _ISOC9X_SOURCE  1
+    #define _ISOC99_SOURCE  1
+    #define __USE_ISOC99    1
+    #define __USE_ISOC9X    1
+    #include <math.h>
+    int main (void)
+    {	double	fval ;
+        int k, ival ;
+
+        fval = 1.0 * 0x7FFFFFFF ;
+        for (k = 0 ; k < 100 ; k++)
+        {
+            ival = (lrint (fval)) >> 24 ;
+            if (ival != 127)
+                return 1 ;
+
+            fval *= 1.2499999 ;
+        } ;
+
+        return 0 ;
+    }
+EOF
+
+check_exec -lm << EOF && enable cpu_clips_negative
+    #define _ISOC9X_SOURCE  1
+    #define _ISOC99_SOURCE  1
+    #define __USE_ISOC99    1
+    #define __USE_ISOC9X    1
+    #include <math.h>
+    int main (void)
+    {
+        double	fval ;
+        int k, ival ;
+
+        fval = -8.0 * 0x10000000 ;
+        for (k = 0 ; k < 100 ; k++)
+        {
+            ival = (lrint (fval)) >> 24 ;
+            if (ival != -128)
+                return 1 ;
+
+            fval *= 1.2499999 ;
+        } ;
+
+        return 0 ;
+    }
+EOF
+
+echo
+echo "Torc:"
+
+echo "C++ compiler                 $(which $cxx)"
+echo "qmake                        $(which $qmake) [$($qmake -query QT_VERSION)]"
+echo "libcrypto enabled            ${libcrypto-no}"
+echo "libdns_sd (Bonjour) enabled  ${libdns_sd-no}"
+if test $target_os = "linux"; then
+    echo "libudev enabled              ${libudev-no}"
+    echo "QtDbus enabled               ${qtdbus-no}"
+    echo "X11 enabled                  ${x11base-no}"
+fi
+echo
+#end Torc
+
 echo "Creating config.mak and config.h..."
 
 test -e Makefile || $ln_s "$source_path/Makefile" .
@@ -3681,13 +3894,18 @@
 cat > config.mak <<EOF
 # Automatically generated by configure - do not modify!
 LIBAV_CONFIGURATION=$LIBAV_CONFIGURATION
+PREFIX=$prefix
+BUILD_ROOT="$PWD"
+SYSROOT=$sysroot
 prefix=$prefix
-LIBDIR=\$(DESTDIR)$libdir
-SHLIBDIR=\$(DESTDIR)$shlibdir
-INCDIR=\$(DESTDIR)$incdir
-BINDIR=\$(DESTDIR)$bindir
-DATADIR=\$(DESTDIR)$datadir
-MANDIR=\$(DESTDIR)$mandir
+LIBDIRNAME=$libdir_name
+LIBDIR=$libdir
+SHLIBDIR=$shlibdir
+INCDIR=$incdir
+BINDIR=$bindir
+DATADIR=$datadir
+RUNPREFIX=$(eval eval c_escape $datadir)
+MANDIR=$mandir
 SRC_PATH=$source_path
 CC_IDENT=$cc_ident
 ARCH=$arch
@@ -3718,7 +3936,15 @@
 DLLTOOL=$dlltool
 LDFLAGS=$LDFLAGS
 LDFLAGS-avserver=$AVSERVERLDFLAGS
-SHFLAGS=$SHFLAGS
+#SHFLAGS=$SHFLAGS
+CXX_O=$CXX_O
+ECXXFLAGS=$ECXXFLAGS
+CXXPPFLAGS=$CXXPPFLAGS
+CONFIG-=app_bundle
+QMAKE=$qmake
+QMAKE_CC=$cc
+QMAKE_CXX=$cxx
+QMAKE_LINK=$cxx
 YASMFLAGS=$YASMFLAGS
 BUILDSUF=$build_suffix
 FULLNAME=$FULLNAME
@@ -3755,7 +3981,7 @@
 CFLAGS-avplay=$sdl_cflags
 ZLIB=$($ldflags_filter -lz)
 LIB_INSTALL_EXTRA_CMD=$LIB_INSTALL_EXTRA_CMD
-EXTRALIBS=$extralibs
+#EXTRALIBS=$extralibs
 COMPAT_OBJS=$compat_objs
 EXEOBJS=$exeobjs
 INSTALL=install
@@ -3769,13 +3995,13 @@
 SLIB_INSTALL_LINKS=${SLIB_INSTALL_LINKS}
 SLIB_INSTALL_EXTRA_LIB=${SLIB_INSTALL_EXTRA_LIB}
 SLIB_INSTALL_EXTRA_SHLIB=${SLIB_INSTALL_EXTRA_SHLIB}
-SAMPLES:=${samples:-\$(LIBAV_SAMPLES)}
+#SAMPLES:=${samples:-\$(LIBAV_SAMPLES)}
 EOF
 
 get_version(){
     lcname=$1
     name=$(toupper $lcname)
-    file=$source_path/$lcname/version.h
+    file=$source_path/libs/libtorc-av/$lcname/version.h
     eval $(awk "/#define ${name}_VERSION_M/ { print \$2 \"=\" \$3 }" "$file")
     eval ${name}_VERSION=\$${name}_VERSION_MAJOR.\$${name}_VERSION_MINOR.\$${name}_VERSION_MICRO
     eval echo "${lcname}_VERSION=\$${name}_VERSION" >> config.mak
@@ -3820,11 +4046,19 @@
 
 echo "#endif /* LIBAV_CONFIG_H */" >> $TMPH
 
+tmpfile TMPMAK .mak
+tmpfile TMPMAK2 .mak
+sed -e 's/#SHFLAGS=/SHFLAGS=/' -e 's/#EXTRALIBS=/EXTRALIBS=/' config.mak > $TMPMAK
+cp_if_changed $TMPMAK libs/libtorc-av/config.mak
+sed -e 's/^!/#/' config.mak > $TMPMAK2
+cp_if_changed $TMPMAK2 config.mak
+
 # Do not overwrite an unchanged config.h to avoid superfluous rebuilds.
-cp_if_changed $TMPH config.h
-touch .config
+cp_if_changed $TMPH libs/libtorc-core/torcconfig.h
+cp_if_changed $TMPH libs/libtorc-av/config.h
+touch libs/libtorc-av/.config
 
-enabled yasm && cp_if_changed $TMPASM config.asm
+enabled yasm && cp_if_changed $TMPASM libs/libtorc-av/config.asm
 
 cat > $TMPH <<EOF
 /* Generated by ffconf */
@@ -3836,57 +4070,6 @@
 
 echo "#endif /* AVUTIL_AVCONFIG_H */" >> $TMPH
 
-cp_if_changed $TMPH libavutil/avconfig.h
+cp_if_changed $TMPH libs/libtorc-av/libavutil/avconfig.h
 
 test -n "$WARNINGS" && printf "\n$WARNINGS"
-
-# build pkg-config files
-
-pkgconfig_generate(){
-    name=$1
-    shortname=${name#lib}${build_suffix}
-    comment=$2
-    version=$3
-    libs=$4
-    requires=$5
-    enabled ${name#lib} || return 0
-    mkdir -p $name
-    cat <<EOF > $name/$name.pc
-prefix=$prefix
-exec_prefix=\${prefix}
-libdir=$libdir
-includedir=$incdir
-
-Name: $name
-Description: $comment
-Version: $version
-Requires: $(enabled shared || echo $requires)
-Requires.private: $(enabled shared && echo $requires)
-Conflicts:
-Libs: -L\${libdir} -l${shortname} $(enabled shared || echo $libs)
-Libs.private: $(enabled shared && echo $libs)
-Cflags: -I\${includedir}
-EOF
-    cat <<EOF > $name/$name-uninstalled.pc
-prefix=
-exec_prefix=
-libdir=\${pcfiledir}
-includedir=${source_path}
-
-Name: $name
-Description: $comment
-Version: $version
-Requires: $requires
-Conflicts:
-Libs: \${libdir}/${LIBPREF}${shortname}${LIBSUF} $libs
-Cflags: -I\${includedir}
-EOF
-}
-
-pkgconfig_generate libavutil "Libav utility library" "$LIBAVUTIL_VERSION" "$LIBM"
-pkgconfig_generate libavcodec "Libav codec library" "$LIBAVCODEC_VERSION" "$extralibs" "libavutil = $LIBAVUTIL_VERSION"
-pkgconfig_generate libavformat "Libav container format library" "$LIBAVFORMAT_VERSION" "$extralibs" "libavcodec = $LIBAVCODEC_VERSION"
-pkgconfig_generate libavdevice "Libav device handling library" "$LIBAVDEVICE_VERSION" "$extralibs" "libavformat = $LIBAVFORMAT_VERSION"
-pkgconfig_generate libavfilter "Libav video filtering library" "$LIBAVFILTER_VERSION" "$extralibs"
-pkgconfig_generate libavresample "Libav audio resampling library" "$LIBAVRESAMPLE_VERSION" "$extralibs"
-pkgconfig_generate libswscale "Libav image rescaling library" "$LIBSWSCALE_VERSION" "$LIBM" "libavutil = $LIBAVUTIL_VERSION"
